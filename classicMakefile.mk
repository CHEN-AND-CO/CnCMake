#####################################################################################################
#																									#
#						Classic Chen & Co Generic Makefile by BlivionIaG							#
#																									#
#####################################################################################################


# Tools
R_WILDCARD=$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call R_WILDCARD,$d/,$2))
FILTER_OUT=$(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))
empty:=


# Build config and output
BINARY_NAME = $(notdir $(CURDIR))
OUTPUT_FOLDER = 
CFLAGS = -g -Wall -Wextra -Os
LDFLAGS = -lm -ansi -lpthread


# Project Type
ifeq ($(PROJECT_TYPE),c)		# C Project Type
	SRC_EXT = c
	INC_EXT = h
	COMPILER = gcc
	STD_NORM = gnu11
else ifeq ($(PROJECT_TYPE),c++)	# C++ Project Type
	SRC_EXT = cpp
	INC_EXT = hpp
	COMPILER = g++
	STD_NORM = c++17
else							# Default Project Type
	PROJECT_TYPE = c++
	SRC_EXT = cpp
	INC_EXT = hpp
	COMPILER = g++
	STD_NORM = c++17
endif


ifeq ($(TARGET),)
	COMPILER_PREFIX =
else ifeq ($(TARGET),rpi1)
	COMPILER_PREFIX = arm-linux-gnueabihf-
	OPT_CFLAGS = -mcpu=arm1176jzf-s -mfloat-abi=hard -mfpu=vfp -mtune=arm1176jzf-s -static-libstdc++
	EXTENSION = -rpi1
else ifeq ($(TARGET),rpi2)
	COMPILER_PREFIX = arm-linux-gnueabihf-
	OPT_CFLAGS = -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4 -mtune=cortex-a7 -static-libstdc++
	EXTENSION = -rpi2
else ifeq ($(TARGET),rpi3)
	COMPILER_PREFIX = arm-linux-gnueabihf-
	OPT_CFLAGS = -mcpu=cortex-a53 -mfloat-abi=hard -mfpu=neon-fp-armv8 -mneon-for-64bits -mtune=cortex-a53 -static-libstdc++
	EXTENSION = -rpi3
else ifeq ($(TARGET),beaglebb)
	COMPILER_PREFIX = arm-linux-gnueabihf-
	OPT_CFLAGS = -mcpu=cortex-a8 -mfloat-abi=hard -mfpu=neon -mtune=cortex-a8 -static-libstdc++
	EXTENSION = -beaglebb
endif


# Source files detection
ALLSRC := $(call rwildcard,,*.$(SRC_EXT))
FILTERED_SRC = $(ALLSRC)					#$(call FILTER_OUT,THINGS_TO_FILTER,$(ALLSRC))
SRCDIR = $(sort $(dir $(FILTERED_SRC)))

# Header files detection
ALLINC := $(call rwildcard,,*.$(INC_EXT))
FILTERED_INC = $(ALLINC)					#$(call FILTER_OUT,THINGS_TO_FILTER,$(ALLINC))
INCDIR = $(sort $(dir $(FILTERED_INC)))

# Lib files detection
ALLLIB := $(call rwildcard,,*.a) $(call rwildcard,,*.lib)
FILTERED_LIB = $(ALLLIB)					#$(call FILTER_OUT,THINGS_TO_FILTER,$(ALLLIB))
LIBDIR = $(sort $(dir $(FILTERED_LIB)))


# Includes / Libs / Flags
INCLUDES = $(addprefix -I,$(subst $(addsuffix /,$(CURDIR)),,$(realpath $(INCDIR)))) 	# include folders
CFLAGS += -std=$(STD_NORM) $(OPT_CFLAGS)												# Compiler flags
LDFLAGS += 																				# Libs for all systems
LDFLAGS += $(addprefix -L,$(subst $(addsuffix /,$(CURDIR)),,$(realpath $(LIBDIR))))		# Static libs inclusion
NOM = $(basename $(notdir $(SRC)))
OBJ = $(addprefix $(OUTPUT_FOLDER),$(addsuffix .o, $(NOM)))


# SSH/SCP credentials
REMOTE_USER = root
REMOTE_HOST = 127.0.0.1
REMOTE_PATH = ~/


# Compiler choice
ifeq ($(CC),cc)									# If CC set to "cc"				
	CC = $(COMPILER_PREFIX)$(COMPILER)			# Forced to default compiler
endif
ifeq ($(CC),)									# If no c or c++ compiler set
	CC = $(COMPILER_PREFIX)$(COMPILER)			# Forced to default compiler
endif


# OS Detection
ifeq ($(OS),Windows_NT)     					# Windows OS
    detected_OS := Windows
else
    detected_OS := $(shell uname) 				# Unix Based OS
endif

# Apply specific parameters for Windows
ifeq ($(detected_OS),Windows)
	DELETE_CMD = del /F
	ifeq ($(TARGET),)
		EXTENSION = .exe
	endif
endif
# DELETE CORRECTION FOR WINDOWS
ifeq ($(detected_OS),Windows)
	DELETE_OBJ = $(subst /,"\", $(OBJ))
else 
	DELETE_OBJ = $(OBJ)
endif


all: $(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION)									# Build all executables

rebuild: remake												# Clean and build all executables

remake: clean $(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION)							# Same as rebuild

$(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION): $(OBJ)
	$(CC) $(CFLAGS) $(OBJ) $(LDFLAGS) -o $(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION)

# Build all the .o files
$(OUTPUT_FOLDER)%.o: %.$(SRC_EXT)
	$(CC) $(CFLAGS) -c $< $(INCLUDES) -o $@
	
# Remove all files generated by compilation (executables included)
clean:
	$(DELETE_CMD) $(DELETE_OBJ) $(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION) *.gch

# Remove all files generated by compilation (except executables)
clear:
	$(DELETE_CMD) $(DELETE_OBJ) *.gch

run: $(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION)
	./$(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION)

upload: remake
	scp ./$(OUTPUT_FOLDER)$(BINARY_NAME)$(EXTENSION) $(REMOTE_USER)@$(REMOTE_HOST):$(REMOTE_PATH)

remote-run: upload
	ssh $(REMOTE_USER)@$(REMOTE_HOST) '$(REMOTE_PATH)$(BINARY_NAME)$(EXTENSION)'

kill:
	ssh $(REMOTE_USER)@$(REMOTE_HOST) 'killall -s 2 $(BINARY_NAME)$(EXTENSION)'